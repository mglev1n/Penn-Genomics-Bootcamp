---
title: "Penn Genomics Summer Bootcamp"
subtitle: "Lecture 4 Exercises: Identifying loci"
date: last-modified
format:
  html:
    code-tools: true
    toc: true
    toc-depth: 6
    cap-location: top
    self-contained: true
    embed-resources: true
    citations-hover: true
fig-height: 4
execute:
  warning: false
  message: false
  echo: true
csl: https://raw.githubusercontent.com/citation-style-language/styles/6152ccea8b7d7a472910d36524d1bf3557a83bfc/dependent/nature-genetics.csl
bibliography: references.bib
---

```{r}
pak::pkg_install("lcpilling/gwasRtools", ask = FALSE)
```

Load the packages into the current session using `library()`

```{r}
library(tidyverse)
library(vroom)
library(gwasRtools)
```

## Exercise 1 - Identifying lead variants using `gwasRtools`

`gwasRtools` <https://github.com/lcpilling/gwasRtools> is a package that allows you to identify lead loci/variants in your GWAS. We will use the `vroom::vroom()` package to load some GWAS summary statistics. 

We'll return to the GWAS summary statistics for heart failure from FinnGen release 7. Here, we're only interested in genome-wide significant variants, so we'll filter the data to include only variants with a p-value less than 5e-8. We'll then use `gwasRtools::lead_variants()` to identify the lead variants in the data. 

```{r}
hf_sumstats_gws <- vroom::vroom("/project/damrauer_scratch/summary_stats/HF/RAW/FINNGEN/summary_stats_finngen_R7_I9_HEARTFAIL_ALLCAUSE.gz") %>%
  filter(pval < 5e-8)

hf_sumstats_gws %>%
  glimpse()
```

We see there are 234 genome-wide significant variants in the data. However, we're primarily interested in how many of these variants are actually located in separate regions of the genome. We can use `gwasRtools::get_loci()` to identify the loci in the data. The  `locus` column will denote which genomic region each variant has been assigned to, and the `lead` column will tell us whether a variant represents the lead signal at the locus. By default, each locus will be 500kb in size (`n_bases = 5e5`).

```{r}
hf_locus_df <- hf_sumstats_gws %>%
  gwasRtools::get_loci(
    snp_col = "rsids",
    chr_col = "#chrom",
    pos_col = "pos",
    maf_col = "af_alt",
    beta_col = "beta",
    se_col = "sebeta",
    p_col = "pval"
  )

hf_locus_df %>%
  glimpse()
```

We see that there are 4 loci in the data, and each of the genome-wide significant variants have been assigned to a locus:

```{r}
hf_locus_df %>%
  count(locus)
```

If we make each locus smaller (100kb), the number of loci increases. Locus counts are therefore arbitrary. If comparing across studies you should uniformly define/apply a method for consistently counting loci.

```{r}
hf_sumstats_gws %>%
  gwasRtools::get_loci(
    snp_col = "rsids",
    chr_col = "#chrom",
    pos_col = "pos",
    maf_col = "af_alt",
    beta_col = "beta",
    se_col = "sebeta",
    p_col = "pval",
    n_bases = 1e5
  ) %>%
  count(locus)
```


We can focus on the lead signals at each locus:

```{r}
hf_locus_df %>%
  filter(lead == TRUE)
```


Setting the `ld_clump = TRUE` argument will perform LD clumping to identify potentially independent signals within each locus. By default, this will consider variants with an r^2^ < 0.01 as "independent".
```{r}
hf_locus_df_clumped <- hf_sumstats_gws %>%
  gwasRtools::get_loci(
    snp_col = "rsids",
    chr_col = "#chrom",
    pos_col = "pos",
    maf_col = "af_alt",
    beta_col = "beta",
    se_col = "sebeta",
    p_col = "pval",
    ld_clump = TRUE,
    ld_plink_bin = "/project/voltron/Applications/PLINK/plink_linux_x86_64_20210606/plink",
    ld_bfile = "/project/voltron/Resources/1000-Genomes-Phase3/MRC-IEU/EUR"
  )

hf_locus_df_clumped %>%
  count(lead_ld)
```

## Exercise 2 - Identify nearby genes

We can use the `get_nearest_gene()` function to identify the nearest gene to each variant in the data. The `gene` column will contain the nearest gene.

 - If `dist` is positive, the variant is intergenic, and this is the distance to the closest gene.
 - If `dist` is negative, the variant is within a gene, and this is the distance to the start of the gene.
 - If `dist` is NA, the variant is not within `n_bases` of a gene in GENCODE.

```{r}
hf_locus_genes_df <- hf_locus_df %>%
  get_nearest_gene(
    snp_col = "rsids",
    chr_col = "#chrom",
    pos_col = "pos",
    build = 38, 
    n_bases = 250000
  )

hf_locus_genes_df %>%
  glimpse()
```
